function returns_true() -> bool
  return true
end

assert returns_true()

function identity(a : int) -> int
  assert a == 1
  return a
end

assert identity(1) == 1


function toggle(a : bool) -> bool
  return not a
end

assert toggle(true) == false
assert toggle(toggle(true)) == true

function add_one(a : int) -> int
  val b := a + 1
  return b
end

do
  val a := 0
  a = add_one(a)
  assert a == 1
end

function multiple_args(a : int, b : bool, c : double)
  assert a == 1
  assert b
  assert c == 2.0
end

multiple_args(1, true, 2.0)

# function recur(num : int) -> int
#   if num <= 1 then
#     return num
#   end
# 
#   return num + recur(num - 1)
# end
# 
# assert recur(0) == 0
# assert recur(1) == 1
# assert recur(2) == 3
# assert recur(3) == 6
# assert recur(4) == 10

do
  val i := 10
  while i > 0 do
    assert identity(1) == 1
    i = i - 1
  end
end

function inc_with_in(in a: int) -> int
  return a + 1
end

do
  val a := 0
  a = inc_with_in(a)
  assert a == 1
end

function inc_with_out(out a: int)
  a = a + 1
end

do
  val a := 0
  a = inc_with_in(a)
  assert a == 1
end

do
  class Vec2
    x: int
    y: int
  end

  function add(
        in a: Vec2,
        in b: Vec2
      ) -> Vec2
    return Vec2{a.x + b.x, a.y + b.y}
  end

  val a := Vec2{1, 2}
  val b := Vec2{3, 4}
  val c := add(a, b)
  assert c.x == 4
  assert c.y == 6
end

# do
#   function bar(a: int) -> int
#     return foo(a)
#   end
# 
#   function foo(a: int) -> int
#     return a
#   end
# 
#   assert bar(1) == 1
# end