##########

class InnerA
  a : int
  b : int
end

class InnerB
  a : int
  b : int
  c : int
  d : InnerA
end

class Outer2
  inner_a : InnerA
  inner_b : InnerB
end

do
  let outer := Outer2{}
  outer.inner_a.a = 10
  #outer.inner_a.b = 9
  #outer.inner_b.a = 8
  #outer.inner_b.b = 7
  #outer.inner_b.c = 6
  #outer.inner_b.d.a = 5
  #outer.inner_b.d.b = 4
  #
  #assert outer.inner_a.a == 10
  #assert outer.inner_a.b == 9
  #assert outer.inner_b.a == 8
  #assert outer.inner_b.b == 7
  #assert outer.inner_b.c == 6
  #assert outer.inner_b.d.a == 5
  #assert outer.inner_b.d.b == 4
end

class ZeroInit
  x : int
end

do
  let a := ZeroInit{}
  assert a.x == 0

  a.x = 1
  assert a.x == 1
end

##########

class DefaultInit
  x : int = 2
end

do
  let b := DefaultInit{}
  assert b.x == 2
end


##########

class OneMember
  a : int = 0
end

do
  let a := OneMember{1}
  assert a.a == 1

  a.a = 2
  assert a.a == 2

  let b := &a.a
  b = 3
  assert a.a == 3
end


##########


class TwoMembers
  a : int = 1
  b : int = 2
end

do
  let a := TwoMembers{}
  assert a.a == 1
  assert a.b == 2
end

do
  let a := TwoMembers{3, 4}
  assert a.a == 3
  assert a.b == 4

  a.a = 5
  a.b = 6
  assert a.a == 5
  assert a.b == 6

  let b := &a.a
  let c := &a.b
  b = 2
  c = 3
  assert a.a == 2
  assert a.b == 3
end

##########

class Vec3
  x : double
  y : double
  z : double
end

do
  let vec := Vec3{}
  assert vec.x == 0.0
  assert vec.y == 0.0
  assert vec.z == 0.0
end

do
  let vec := Vec3{z=3.0}
  assert vec.x == 0.0
  assert vec.y == 0.0
  assert vec.z == 3.0
end

do
  let vec := Vec3{y=2.0, z=3.0}
  assert vec.x == 0.0
  assert vec.y == 2.0
  assert vec.z == 3.0
end

do
  let vec := Vec3{x=1.0, y=2.0, z=3.0}
  assert vec.x == 1.0
  assert vec.y == 2.0
  assert vec.z == 3.0
end

do
  let vec := Vec3{1.0, 2.0, z=3.0}
  assert vec.x == 1.0
  assert vec.y == 2.0
  assert vec.z == 3.0
end

##########

class DiffType
  a : int
  b : double
end

do
  let a := DiffType{}
  a.a = 1
  a.b = 2.0
  assert a.a == 1
  assert a.b == 2.0
end

##########

class DiffTypeWithDefaultVals
  c : int = 1
  d : double = 2.0
end

do
  let a := DiffTypeWithDefaultVals{}
  assert a.c == 1
  assert a.d == 2.0
end

/#

##########

class Tree
  left : Tree*
  right : Tree*
end


#/