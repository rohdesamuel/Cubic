do
  let a := 100
  ref b := a

  assert a == 100
  assert b == 100

  b = 200

  assert a == 200
  assert b == 200
end

do
  let a : int = 100
  ref b : int = a

  assert a == 100
  assert b == 100

  b = 200

  assert a == 200
  assert b == 200
end

do
  let a := 'hello'
  ref b := &a

  assert a == 'hello'
  assert b == 'hello'

  b = 'world'

  assert a == 'world'
  assert b == 'world'
end

# Duplicate references.
do
  let a := 100
  ref b := &a
  ref c := b

  assert a == 100
  assert b == 100
  assert c == 100

  c = 200

  assert a == 200
  assert b == 200
  assert c == 200
end

do
  let a : int = 100
  let b : int& = &a
  let c : int& = b

  assert a == 100
  assert b == 100
  assert c == 100

  c = 200

  assert a == 200
  assert b == 200
  assert c == 200
end

do
  let a := 1
  function foo(ref x : int) 
    x = 100
  end

  assert a == 1
  foo(a)
  assert a == 100
end

do
  let a := 1
  function foo(ref x : int) -> ref int
    return x
  end

  let b := foo(a)
  b = 2
  assert a == 2
end