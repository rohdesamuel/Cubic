function simple_print(x: string)
  print(x)
end

function with_refs(ref x: string) -> ptr string
  x = x + 'a'
end

function closure(x: string) -> () -> string do
  return function() -> string x
end

function variadic(args: ...)
  for arg in args do
    print(arg)
  end
end

function typed_variadic(args: ...int)
  val result := 0
  for arg in args
    result += arg

  return result
end

function other_coroutine()
  yield 3
end

function coroutine()
  yield 1
  yield 2
  yield other_coroutine
end

function loadfile()
  val f := open("some/file")
  return f.read()
end

function some_filecoroutine()
  val file_contents := async loadfile()

  # Suspends this coroutine until file_contents is filled.
  await file_contents

  print(file_contents)
end

simple_print('Hello, world!')

closure('Hello, world!')()

val lambda := function() print('Hello, World!')
lambda()