###########################

# Final decisions.
# A value or "val" declares a variable on the stack with local storage.
val a: int
val a: Foo

# A reference or "var" declares a variable on the heap with automatic storage.
var a: int = 0
var a: Foo = 0

# A reference can be initialized to copy a value or alias another reference.
# Trying to alias a value will copy the value.
val a: int
var b: int
var c: int = a  # Copies the value of 'a' into a new heap allocation
var d: int = b  # Aliases 'b', increments the reference count.

# A reference can be constructed with a different allocator using the "with" keyword.
val a: int = 0 with my_custom_allocator

# A value can also be a pointer. This is a manually managed piece of memory.
# The use of pointers must be within an "unsafe" block.
unsafe
  # This creates a new pointer to an int.
  val a: *int = new int{1}
  
  # This deletes the pointer.
  del a

  # This creates a new pointer to an int with a custom allocator.
  val a: *int = new int{1} with alloc
  del a with alloc

  # This creates a pointer to a variable.
  val b: int
  val a: *int = &a

  # Pointer arithmetic is allowed. This increments the address.
  a += 1

  # This increments the value.
  *a += 1

  # A "Block" is a C-style array.
  # This creates a 
  val block: Block = new Block[256]
  val block: Block = new Block[256]
end


###########################
Requirements:
  - Able to pass in values
  - Able to pass in reference-counted variables
  - Able to pass in values by reference

# Copy everything?
# Pros:
#  - simple
# Cons:
#  - performance loss when passing in large value
function foo(a: int)
end

# Keywords
# Pros:
#  - self-documenting
#  - allows for passing large values
# Cons:
#  - harder to learn
#  - needs a specific keyword for every situation
function foo(a: int, in a: int, out a: int, in var a: int)
end

# Shadow initialization
# Pros:
#  - no need to learn new keywords
# Cons:
#  - Non-intuitive: passing a value into a var creates a new reference
#  - verbose
function foo(val a: int, var b: int)
  a = b
  b = 10
end

# Hybrid?
function foo(a: int, var b: int)
end

# Compiler magic?
# Pros:
#  - simple
#  - no new keywords
# Cons:
#  - how to implement?
#  - function code doesn't know if argument is mutable or not
#  - code gen bloat
function foo(a: int, in b: int /*const&*/, out c: int /*&*/)
  # Is "a" a var? Will this mutate the value?
  a = 1
end

function add(a: vec2, b: vec2) -> vec2
  return vec2{a.x + b.x, a.y + b.y}
end

function add(in a: vec2, in b: vec2) -> vec2
  return vec2{a.x + b.x, a.y + b.y}
end

function add(in a: vec2, out b: vec2)
  b.x += a.x
  b.y += a.y
end

# Function parameters can either be a "val" or "var". A "var" being passed into
# a "val" will copy the referenced value. A "val" being passed into a "var"
# creates a new reference.
function foo(val a: int, var b: int)
  a = b
  b = 10
end

# A function can return a reference denoted by the "var" before the return
# type.
function bar(a: int) -> var int
end

class ListNode
  var next: ListNode?
  val n: int
end

class LinkedList
  var head: ListNode
end

function LinkedList.append(n: int)
  var head := ListNode{n: n}
  self.head = head
end

###################
# USE CASE 1
#
# Creating a custom allocator / Reinterpreting raw bytes
###################
struct Block {
  size_t size;
};

size_t size = 4096;
Block* block = malloc(sizeof(Block) + size);
block->size = size;
block->memory = (char*)block + sizeof(Block);

class Block
  size: int
end

val size := 4096
val block := alloc(sizeof(Block) + size)
block.size = size
block.memory = (block as char*) + size


###################
# USE CASE 2
#
# Co-locating multiple arrays.
###################
struct Mesh {
  int num_verts;
  Vec3* pos;
  Vec3* norms;
  Vec2* uvs;
};

int num_verts = 100;
Mesh* mesh = malloc(sizeof(Mesh) + num_verts * (sizeof(Vec3) + sizeof(Vec3) + sizeof(Vec2)));
mesh->pos   = (char*)mesh + sizeof(Mesh);
mesh->norms = (char*)mesh + sizeof(Mesh) + num_verts * sizeof(Vec3);
mesh->uvs   = (char*)mesh + sizeof(Mesh) + num_verts * (sizeof(Vec3) + sizeof(Vec3));

class Mesh
[
    num_pos : int, 
    num_norms : int,
    num_uvs : int
]
  num_verts: int = num_pos
  pos: vec3[num_pos]
  norms: vec3[num_norms]
  uvs: vec3[num_uvs]
end

struct Mesh with [num_verts: int]
  pos: vec3[num_verts]
  norms: vec3[num_verts]
  uvs: vec3[num_verts]
end

val num_verts := 100
val mesh := new Mesh with [num_verts=num_verts]


###################
# USE CASE 3
#
# Should you free or not free memory from an API? Whos owns the memory?
###################

struct Foo_* foo_create();

struct Foo_* f = foo_create();

function foo_create() -> ref Foo
  return Foo{}
end

// free(f)?
// not free(f)?
// foo_destroy(f)?


###################
# USE CASE 4
#
# Who should free memory in structs?
###################

struct A {
  int* arr;
};

A a;
a.arr = calloc(10, sizeof(int));

free(A);  // leaks a.arr

class A
  ref arr: int[]
end

do
  val a: A
  a.arr = int[100]

  # `a.arr` is automatically freed here
end


###################
# USE CASE 5
#
# Object lifetimes
###################

struct A {
  ...
};

A* a = new A;

class A
  ...
end

do
  # Stack allocated
  do
    val d: A = A{}
  end  # deallocated here

  do
    # Reference counted
    ref b: A = A{}

    # Decrements b's ref counter
    # del b  
  end  # reference count reaches zero, so deallocated

  do
    # Needs to be manually destroyed
    # Heap allocated
    ptr a: A = new A{}
  
    # Deletes a
    del a
  end
end


###################
# USE CASE 6
#
# Allocating objects from an allocator
###################

struct A {
  ...
};

A* a = new A;

class A
  ...
end

do
  val b := new PageAllocator()

  val a := with b new A{}
end


###################
# USE CASE 7
#
# Allocating from an arena
###################

val region := new PageAllocator{}

with region do
  val foo := new Foo{ bar=new Bar{} }
end


###################
# USE CASE 8
#
# Deferred allocation
###################

# Not allowed!
# ref a : int

# Needs to be an optional
ref a? : int

# OK! Always initialized
if x then
  a = 1
else
  a = 2
end




##################/
## Stream of consciousness thoughts
struct Vec3
  x: int
  y: int
  z: int
end

struct Body
  pos: Vec3*
  vel: Vec3
end

# *  --- Non-null raw Pointer
# !  --- unique pointer
# &  --- shared pointer (ref counted)
# (nothing) --- co-located member


do
  val b: Body = Body(pos=new Vec3(0, 0, 0), vel=new Vec3(0, 0, 0))

  val b_ptr: Body*  = &b
  val b_shd: Body&  = &b # ERROR: cannot create shared pointer to stack var
  val b_unq: Body!  = &b # ERROR: cannot create unique pointer to stack var
end

# & := address of operator
# * := dereferencing operator

val name: type = assignee
type    , assignee, method
---     , ---     , copies value
---     , *       , ERROR: non-pointer cannot take value of pointer
---     , !       , ERROR: non-pointer cannot take value of pointer
---     , &       , ERROR: non-pointer cannot take value of pointer

*       , ---     , sets variable to assignee
*       , *       , sets variable to assignee
*       , !       , borrows ownership, weak reference
*       , &       , borrows ownership, weak reference

&       , ---     , creates a new shared ptr copied from assignee
&       , *       , moves ownership of assignee to variable
&       , !       , moves ownership of assignee to variable
&       , &       , borrows ownership, strong reference

!       , ---     , creates a new unique ptr copied from assignee
!       , *       , moves ownership of assignee to variable
!       , !       , moves ownership of assignee to variable
!       , &       , ERROR: Unique ptr cannot borrow from shared ptr

variable = assignee
variable, assignee, method
---     , ---     , copies value
---     , *       , ERROR: non-pointer cannot take value of pointer
---     , !       , ERROR: non-pointer cannot take value of pointer
---     , &       , ERROR: non-pointer cannot take value of pointer

*       , ---     , sets variable to assignee
*       , *       , sets variable to assignee
*       , !       , borrows ownership, weak reference
*       , &       , borrows ownership, weak reference

&       , ---     , ERROR: shared ptr cannot be assigned to a raw location
&       , *       , moves ownership of assignee to variable
&       , !       , moves ownership of assignee to variable
&       , &       , borrows ownership, strong reference

!       , ---     , ERROR: unique ptr cannot be assigned to a raw location
!       , *       , moves ownership of assignee to variable
!       , !       , moves ownership of assignee to variable
!       , &       , ERROR: Unique ptr cannot borrow from shared ptr

*variable, method
---      , ERROR: Cannot dereference a non-pointer
*        , Copies pointed to value
&        , Copies pointed to value
!        , Copies pointed to value



Equivalent(
  'ref' Id ':' [Type] '=',
  'let' Id ':' Type '&' '='
  )

Equivalent(
  'ptr' Id ':' [Type] '=',
  'let' Id ':' Type '*' '='
  )

Equivalent(
  'unq' Id ':' [Type] '=',
  'let' Id ':' Type '!' '='
  )

# Creates a Vec3 on the stack.
let pos_on_stack := Vec3(1, 2, 3)

# Creates a Vec3 on the heap.
let pos_on_heap := new Vec3{1, 2, 3}
ref ref_pos     := new Vec3{1, 2, 3}

ref pos_from_ref := &pos_on_heap
ptr pos_from_ptr := &pos_on_heap


function del_vec(v: Vec3&) do
end


struct Vec3
  x, y, z: float
end

entity Ball
  pos: Vec3
  vel: Vec3
end

let ball_pen: Arena[Ball] = ()

for b in Ball do
  pass
end

for b in ball_pen do
end

let l : list[int] = [1, 2, 3]

fn sum(l : list[int]) -> int
  let accum := 0
  for i in l do
    accum += i
  end

  return accum
end

# OK, copies `l`
sum(l)


fn sum(l : list[int]*) -> int
  ...
end

# OK, creates a new weak reference to `l`
sum(l)

fn sum(l : list[int]&) -> int
  ...
end

# OK, creates a new shared reference to `l`
sum(l)

fn sum(l : list[int]!) -> int
  ...
end

# OK, creates a new unique reference to `l`

struct Bar
  a: int!
  b: string!
end

struct Foo
  bar: Bar
end


let f : Foo = (Bar(1, 'a'))

function frobnicate(x: Foo)
  ...
end

# ERROR: 'Foo' is not copyable because 'Foo.bar' is not copyable.
frobnicate(f)

# OK: Creates a shared ptr `x` to f
function frobnicate(x: Foo&)

# OK: Creates a unique ptr `x` to f
function frobnicate(x: Foo!)

do
  let f : Foo = ...

  ref g := &f
  ptr i := &f
end

do
  let x: int = 5
  let y: int* = &x
  let z: int* = new int{5}
  let j := new int{5}
  let w: list[int] = new list[int] 
end


##############

struct Foo
  a : int
end

let foo_stack := Foo{}
let foo_heap  := new Foo{}

*foo_heap = foo_stack

let a := Foo()
let b := Foo()

# Simple byte-by-byte copy from b to a
a = b

# Move b to a?
a <- b

struct Bar
  a : ref
end

let a := Bar()
let b := Bar()

# TODO: what is the reference count of a.a and b.a?
a = b


########

let a := ( ( ('a') + ('b') ) + ('c') )
           ^
           Temp value created here

# Step 1
KIND_VAL := KIND_STATIC['a'] + KIND_STATIC['b'] + KIND_STATIC['c']

# Step 2
KIND_VAL := KIND_TMP['ab'] + KIND_STATIC['c']

# Step 3
KIND_VAL := KIND_TMP['abc']

########

print('a' + 'b')

STATIC 'a'
STATIC 'b'


# Step 1
print(KIND_STATIC['a'] + KIND_STATIC['b'])

# Step 2
print(KIND_TMP['ab'])

########




let b := a + 'd'
         ^
         No temp value created here

let c := 'e' + b
         ^
         Temp value created here

########
let a := Val{} + Val{} + Val{}
         ^
         Temp value created here

let b := a + Val{}
         ^ 

######
# Lifetime (related to ownership)
#  - when to free memory
#  - in a GC cycle?
#  - end of scope?
#  - zero references?
# 
# Region
#  - Which heap?
#  - thread local or global?
#  - allows for custom allocators
# 
# Ownership/aliasing?
#  - can there be multiple names pointing to same place in memory
# 
# Reinterpretable
#  - Can reinterpret the pointer or sub-region as another type (mandatory for custom allocators)
# 
# Concurrency
#  - can it be shared across threads?
#  - can it be destroyed between threads?
# 
# Alignment
# 
# Examples
#  - c++ shared_ptr
#  - c++ unique_ptr
######

###### Behavior: out-of-scope
do
  let a := new int{}
  # a is destroyed here
end

###### Behavior: parent struct is destructed
do
  let foo := new Foo{bar=new Bar{}}
  # foo is destroyed here
  # foo.bar is destroyed here
end

###### Behavior: allocated from region
do
  let foo := new Foo{} from custom_region
  # foo is destroyed here
end

###### Behavior: memory shared between two threads
do
  let foo := share Foo{bar=new Bar{}}
  
  async take_foo(foo)
  async take_foo(foo)
end


# Weak references
# A weak reference is a non-owned reference.
# Any reference to a stack variable is a weak reference.
do
  let a := 0
  ref b : int& = &a  # A reference to a stack value is a weak reference
  # OR
  let b := &a
end

let a := 0
let b := &a  # Cannot take reference of value

var a := 0
let b := &a  # ok to take reference of var
var b := &a  # what does this mean?
b = 1

# Strong references
# A strong reference is a shared reference.
# A strong reference is reference counted.
# When the reference count of a strong reference reaches 0, the memory is freed.
do
  ref a : Foo& = new Foo{}
  # OR
  let b := &a
end

# Value
do
  let a := Foo{}
end

# Unique value
do
  let a : Foo! = new Foo{}
  # OR
  let a := new Foo{}
  let b : int! = 0
  
  let c := &b  # Not allowed

  let b := &a  # Not allowed
  let b := a   # Copies `a` into `b`
end

# Three lifetimes:
#   1) Lexical scope
do
  let foo := Foo{}
end

#   2) Unique value
do
  let foo := new Foo{}
  let bar := foo  # Copies foo into bar
  ref buz := &foo # Not allowed: cannot create a reference to a unique value
  let foo := &foo # Not allowed: cannot create a reference to a unique value
end

#   3) Reference counted
do
  ref foo := new Foo{}
end

#   5) Parent ownership
do
  let foo := Foo{bar=new Bar{}}
end

#   6) 

###

struct Foo
  bar_ref : Bar&
  bar_unique : Bar!
  bar_ptr : Bar*
end




let foo : Foo = Foo{}
let foo : Foo& = new Foo{}  # Reference counted
let foo : Foo! = new Foo{}  # Unique reference

do
  let i := 0
  let weak_ref_i : int& = &i
end

let foo : shared[Foo] = new Foo{}
let foo : unique[Foo] = new Foo{}

Foo~
Foo!
Foo@
Foo#
Foo$
Foo%
Foo^
Foo&
Foo*

Foo&&

let foo : Foo! = new Foo{}
ref foo : Foo& = new Foo{}
ref foo : Foo& = &other_foo

##############################
# value
let foo := Foo{}

# unique value
let foo : Foo! = new...
let foo := new...

# ref counted, shared reference
let foo : Foo& = new...
ref foo := new...
ref foo := &other

# weak ref
let foo : Foo& = &stack_value
let foo : Foo& = 

# raw ptr
ptr foo := new...
ptr foo := &other
let foo : Foo* = new...

# weak ref, unowned reference
let foo := &other
let foo : Foo& = &other

# three common types
let value := Foo{}
let unique := new Foo{}
let weak := &value


struct Bar
  foo: Foo!
  foo: Foo&
end

###############################
# value
#  - Stack or in-place allocated
#  - one alias to the value
#  - destroyed when out of scope
#  - destroyed when parent is destructed
let foo := Foo{}
foo = other_foo  # copies other_foo into foo

# unique reference
#  - Heap-allocated
#  - one alias to the value
#  - destroyed when out of scope
#  - destroyed when parent is destructed
#  - cannot be shared between threads or coroutines
let foo := new Foo{}
let foo : Foo! = new Foo{}
foo = &other_foo        # not allowed
foo = other_foo         # copies other_foo
other_foo = foo         # copies foo
let other := &foo       # not allowed
let other : Foo! = foo  # copies foo

# reference counted
#  - Heap-allocated
#  - potentially many aliases to the value
#  - destroyed when out of scope
#  - destroyed when parent is destructed
ref foo := new Foo{}        # makes a new reference counted value
ref foo := &other_foo       # makes a new reference counted and copies other_foo
ref foo := other_unique_foo # invalidates other_unique_foo and takes ownership of value
foo = &other_foo            # removes previous reference and copies other_foo into new reference
foo = other_foo             # copies other_foo

# pointer
#  - Stack or heap-allocated
#  - potentially many aliases to the value
#  - not destroyed when out of scope
#  - not destroyed when parent is destructed
ptr foo := new Foo{}  # makes a new unmanaged piece of memory
ptr foo := &other_foo # simply an address to another value

# address
let foo : ptr = &foo 

function fizz(foo: Foo!)
  ...
end

class Vec2
  pub x: float
  pub owns y: float

  function __new(self, x : float, y : float)
    self.x = x
    self.y = y
  end

  function __add(l: Vec2, r: Vec2) -> Vec2
    return Vec2{x=l.x + r.x, y=l.x + r.x}
  end

  function __sub(l: Vec2, r: Vec2) -> Vec2
    return Vec2{x=l.x - r.x, y=l.x - r.x}
  end
end


class ListNode
  prev: ListNode* | nil
  next: ListNode* | nil
  val: int
end

record Vec3
  x: float
  y: float
  z: float
end

class DoublyLinkedList
  pub head: ListNode*
  
  function __new(self)
    self.head = new ListNode{}
  end

  function __del(self)
    let n := self.head
    while n != nil do
      let next := n.next
      del n
      n = next
    end
  end

  function add(self, val: int)
    let old := self.head
    let new := new ListNode{val=val}

    self.head = new
    new.next = old

    if old != nil then
      old.prev = new
    end
  end

  function pop(self, val: int) -> int | nil
    if self.head == nil then
      return nil
    end

    return self.head.val
  end

end



### Simplified

# Value
let a : int = 0

# Weak-reference:
#  - references stack variables
#  - references class variables
let a : int& = &b

# Strong-reference:
#  - reference counted
#  - shared ownership to memory
let a : int& = new int{}

# Owned strong-reference:
#  - not reference counted
#  - unique ownership to memory
#  - cannot reference
class Foo
  pub owns a : int
end

function foo(a : int&) ... end
let a : Foo = ...

# Not-allowed.
foo(a.a)

# Owned shared-reference:
#  - reference counted
#  - shared memory
class Foo
  pub shares a : int
end

class Unique[T]
  pub owns val : T
end

class Shared[T]
  pub shares val : T
end

let unique := Unique[int]{}
let shared := Shared[Int]{}

print(unique.val)
print(shared.val)

ref map[ref list]


### More Simplified

# Value
let a : int = 0

# Weak-reference:
#  - references stack variables
#  - references class variables
let a : int& = &b

# Owned fields:
#  - not reference counted
#  - cannot alias
#  - cleaned when owning instance is destroyed
class Foo
  pub owns a : int
  pub owns b : int&
end

function foo(a : int&) ... end
let a : Foo = ...

# Not allowed.
foo(&a.a)

# Not allowed.
foo(a.b)

# Owned shared-reference:
#  - reference counted
#  - shared memory
class Foo
  pub shares a : int
  pub shares b : int&
end

function foo(a : int&) ... end
let a : Foo = ...

# OK
foo(&a.a)

# OK
foo(a.b)

class Vec3
  pub x: float
  pub y: float
  pub z: float
end

type Vec3
  float, float, float
end

#########

Component Pos : Vec3
Component Vel : Vec3
Component Textures : List[Vec3]

let e := Entity{}
e[Pos] = {}
e[Vel] = {}

###### Doesn't allow for parallel updating...
# forall pos: Pos, vel: Vel do
#   pos = pos + vel
# end
#
# forall e: Entity, pos: Pos, vel: Vel do
#   pos = pos + vel
#   print('updated ' + e)
# end

# or maybe...
# get only even entities
forall e: Entity, pos: Pos, vel: Vel where e % 2 == 0 do
  pos = pos + vel
  print('updated ' + e)
end

# get only odd entities
forall e: Entity, pos: Pos, vel: Vel where e % 2 == 1 do
  pos = pos + vel
  print('updated ' + e)
end

let entities := [...]
let results : iterator[Entity, Pos, Vel] =
    from e: Entity, pos: Pos, vel: Vel
    in entities
    where e < 100

for e, pos, vel in results do
  pos = pos + vel
end



########## more more simplified
# Value
let a : int = 0

# Weak-reference:
#  - acts like non-null pointer
#  - does not free memory when out of scope
weak a : int = b

# Reference:
#  - can be weak or strong reference
#  - if pointing to stack, then weak otherwise, strong
#  - cannot re-assign memory pointed to by reference meaning, a weak reference
#    will stay weak.
ref a : int = b  # weak reference
ref a : int = 1  # strong reference

# Optional reference:
# optional<int&> a;
ref a? : int = nil

a ?? print(a)

if ?a then
  print(a)
end



# Reference to an optional
# optional<int>& a;
ref a : int?

# List of references:
let a : List[ref int]

# Reference to a list of references
ref a : List[ref int]

# Optional reference to a list of references
ref a? : List[ref int]

# Optional reference to a list of optional references
ref a? : List[ref? int]

class Foo
  weak a : int
  ref b : int
end

# OK
do
  ref foo? : Foo
  if something then
    foo = Foo{1}
  else
    foo = Foo{2}
  end
end

# BAD
do
  ref foo : Foo
  if something then
    foo = Foo{1}
  else
    foo = Foo{2}
  end
end

do
  ref b? : int = 1  # reference counted heap allocation
  do
    let a := 100
    b = a
    print(b)  # prints 100
    b = 10
    print(a)  # prints 100
    print(b)  # prints 10
  end
  print(b)  # prints what?
end

do
  let a := 100
  ref b := &a
  print(b)  # prints 100
  b = 10
  print(a)  # prints 10
  print(b)  # prints 10
end

do
  weak b? : int
  do
    let a := 100
    b = a
    print(b)  # prints 100
    b = 10
    print(a)  # prints 10
  end
  print(b)  # Uh-oh!
end


## This isn't good, because it mixes the semantics of weak and strong references as one.
let a := 0  # value a == 0

# Weak references?
ref b := &a # b references a
ref c := b  # c references a

# Strong references?
ref d := 0  # d references heap value 
ref e := d  # e references same heap value as d

class Foo
  ref a? : int
end

let escaped : Foo = Foo{}

function foo(ref x: int)
  # If x is a weak reference or value, copy the value
  # If x is a strong reference, copy the address, increment ref count
  escaped.a = x
end


#### Super-duper simplified

val a := 0   # a stack allocated value
var b := 0   # a reference counted object
ref c := &a  # a weak reference
ref d := &b  # a weak reference

val escape_val : int
var escape_var : int
ref escape_ref : int

function foo(x : int)
  escape_val = x
  escape_var = x
  escape_ref = x
end

function val_foo(val x : int)
  escape_val = x  # copy x
  escape_var = x  # copy x
  escape_ref = x  # get address of x (oops)
end

function var_foo(var x : int)
  escape_val = x  # copy x
  escape_var = x  # reference x
  escape_ref = x  # get address of x (ok)
end

function ref_foo(ref x : int)
  escape_val = x  # copy x
  escape_var = x  # copy x
  escape_ref = x
end

# to = from
# to,  from,  operation
# val  val    copy
# val  var    copy
# val  ref    copy
# var  val    copy
# var  var    inc ref count
# var  ref    copy
# ref  val    addrof
# ref  var    get pointer
# ref  ref    get pointer