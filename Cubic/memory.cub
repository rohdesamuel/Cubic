/##################

###################
# USE CASE 1
#
# Creating a custom allocator / Reinterpreting raw bytes
###################
struct Block {
  size_t size;
};

size_t size = 4096;
Block* block = malloc(sizeof(Block) + size);
block->size = size;
block->memory = (char*)block + sizeof(Block);

struct Block
  size: int
end

let size := 4096
let block := alloc(sizeof(Block) + size)
block.size = size
block.memory = (block as char*) + size

###################
# USE CASE 2
#
# Co-locating multiple arrays.
###################
struct Mesh {
  int num_verts;
  Vec3* pos;
  Vec3* norms;
  Vec2* uvs;
};

int num_verts = 100;
Mesh* mesh = malloc(sizeof(Mesh) + num_verts * (sizeof(Vec3) + sizeof(Vec3) + sizeof(Vec2)));
mesh->pos   = (char*)mesh + sizeof(Mesh);
mesh->norms = (char*)mesh + sizeof(Mesh) + num_verts * sizeof(Vec3);
mesh->uvs   = (char*)mesh + sizeof(Mesh) + num_verts * (sizeof(Vec3) + sizeof(Vec3));

struct Mesh
[
    num_pos : int, 
    num_norms : int,
    num_uvs : int
]
  num_verts: int = num_pos
  pos: vec3[num_pos]
  norms: vec3[num_norms]
  uvs: vec3[num_uvs]
end

struct Mesh with [num_verts: int]
  pos: vec3[num_verts]
  norms: vec3[num_verts]
  uvs: vec3[num_verts]
end

let num_verts := 100
let mesh := new Mesh with [num_verts=num_verts]


###################
# USE CASE 3
#
# Should you free or not free memory from an API? Whos owns the memory?
###################

struct Foo_* foo_create();

struct Foo_* f = foo_create();

// free(f)?
// not free(f)?
// foo_destroy(f)?


###################
# USE CASE 4
#
# Who should free memory in structs?
###################

struct A {
  int* arr;
};

A a;
a.arr = calloc(10, sizeof(int));

free(A);  // leaks a.arr

struct A
  ref arr: int[]
end

do
  let a: A
  a.arr = new int[100]

  # `a.arr` is automatically freed here
end

###################
# USE CASE 5
#
# Allocating objects on the heap
###################

struct A {
  ...
};

A* a = new A;

struct A
  ...
end

do
  # Needs to be manually destroyed
  ptr a: A = new A
  
  # Deletes a
  del a

  # Refernce counted
  ref b: A = new A

  # Decrements b's ref counter
  del b

  # Exclusive ownership to pointer
  # exc c: A = new A
  # Delete c
  # del c

  # Stack allocated
  let d: A = A()
end

###################
# USE CASE 6
#
# Allocating objects from an allocator
###################

struct A {
  ...
};

A* a = new A;

struct A
  ...
end

do
  let b := PageAllocator()

  let a := new A from b;
end

###################
# USE CASE 7
#
# Allocating strings
###################

char* a = new A;

struct A
  ...
end

do
  let b := PageAllocator()

  let a := new A from b;
end
##################/

struct Vec3
  x: int
  y: int
  z: int
end

struct Body
  pos: Vec3*
  vel: Vec3
end

# *  --- Non-null raw Pointer
# !  --- unique pointer
# &  --- shared pointer (ref counted)
# (nothing) --- co-located member


do
  let b: Body = Body(pos=new Vec3(0, 0, 0), vel=new Vec3(0, 0, 0))

  let b_ptr: Body*  = &b
  let b_shd: Body&  = &b # ERROR: cannot create shared pointer to stack var
  let b_unq: Body!  = &b # ERROR: cannot create unique pointer to stack var
end

# & := address of operator
# * := dereferencing operator

let name: type = assignee
type    , assignee, method
---     , ---     , copies value
---     , *       , ERROR: non-pointer cannot take value of pointer
---     , !       , ERROR: non-pointer cannot take value of pointer
---     , &       , ERROR: non-pointer cannot take value of pointer

*       , ---     , sets variable to assignee
*       , *       , sets variable to assignee
*       , !       , borrows ownership, weak reference
*       , &       , borrows ownership, weak reference

&       , ---     , creates a new shared ptr copied from assignee
&       , *       , moves ownership of assignee to variable
&       , !       , moves ownership of assignee to variable
&       , &       , borrows ownership, strong reference

!       , ---     , creates a new unique ptr copied from assignee
!       , *       , moves ownership of assignee to variable
!       , !       , moves ownership of assignee to variable
!       , &       , ERROR: Unique ptr cannot borrow from shared ptr

variable = assignee
variable, assignee, method
---     , ---     , copies value
---     , *       , ERROR: non-pointer cannot take value of pointer
---     , !       , ERROR: non-pointer cannot take value of pointer
---     , &       , ERROR: non-pointer cannot take value of pointer

*       , ---     , sets variable to assignee
*       , *       , sets variable to assignee
*       , !       , borrows ownership, weak reference
*       , &       , borrows ownership, weak reference

&       , ---     , ERROR: shared ptr cannot be assigned to a raw location
&       , *       , moves ownership of assignee to variable
&       , !       , moves ownership of assignee to variable
&       , &       , borrows ownership, strong reference

!       , ---     , ERROR: unique ptr cannot be assigned to a raw location
!       , *       , moves ownership of assignee to variable
!       , !       , moves ownership of assignee to variable
!       , &       , ERROR: Unique ptr cannot borrow from shared ptr

*variable, method
---      , ERROR: Cannot dereference a non-pointer
*        , Copies pointed to value
&        , Copies pointed to value
!        , Copies pointed to value



Equivalent(
  'ref' Id ':' [Type] '=',
  'let' Id ':' Type '&' '='
  )

Equivalent(
  'ptr' Id ':' [Type] '=',
  'let' Id ':' Type '*' '='
  )

Equivalent(
  'unq' Id ':' [Type] '=',
  'let' Id ':' Type '!' '='
  )

# Creates a Vec3 on the stack.
let pos_on_stack := Vec3(1, 2, 3)

# Creates a Vec3 on the heap.
let pos_on_heap := new Vec3(1, 2, 3)
ref ref_pos     := new Vec3(1, 2, 3)

ref pos_from_ref := &pos_on_heap
ptr pos_from_ptr := &pos_on_heap


function del_vec(v: Vec3&) do
end


struct Vec3
  x, y, z: float
end

entity Ball
  pos: Vec3
  vel: Vec3
end

let ball_pen: Arena[Ball] = ()

for b in Ball do
  pass
end

for b in ball_pen do
end

let l : list[int] = [1, 2, 3]

fn sum(l : list[int]) -> int
  let accum := 0
  for i in l do
    accum += i
  end

  return accum
end

# OK, copies `l`
sum(l)


fn sum(l : list[int]*) -> int
  ...
end

# OK, creates a new weak reference to `l`
sum(l)

fn sum(l : list[int]&) -> int
  ...
end

# OK, creates a new shared reference to `l`
sum(l)

fn sum(l : list[int]!) -> int
  ...
end

# OK, creates a new unique reference to `l`

struct Bar
  a: int!
  b: string!
end

struct Foo
  bar: Bar
end


let f : Foo = (Bar(1, 'a'))

function frobnicate(x: Foo)
  ...
end

# ERROR: 'Foo' is not copyable because 'Foo.bar' is not copyable.
frobnicate(f)

# OK: Creates a shared ptr `x` to f
function frobnicate(x: Foo&)

# OK: Creates a unique ptr `x` to f
function frobnicate(x: Foo!)

do
  let f : Foo = ...

  ref g := &f
  ptr i := &f
end

do
  let x: int = 5
  let y: int* = &x
  let z: int* = new int (5)
  let j := new int (5)
  let w: list[int] = new list[int] 
end


##############

struct Foo
  a : int
end

let foo_stack := Foo()
let foo_heap  := new Foo()

*foo_heap = foo_stack

let a := Foo()
let b := Foo()

# Simple byte-by-byte copy from b to a
a = b

# Move b to a?
a <- b

struct Bar
  a : ref
end

let a := Bar()
let b := Bar()

# TODO: what is the reference count of a.a and b.a?
a = b


########

let a := ( ( ('a') + ('b') ) + ('c') )
           ^
           Temp value created here

# Step 1
KIND_VAL := KIND_STATIC['a'] + KIND_STATIC['b'] + KIND_STATIC['c']

# Step 2
KIND_VAL := KIND_TMP['ab'] + KIND_STATIC['c']

# Step 3
KIND_VAL := KIND_TMP['abc']

########

print('a' + 'b')

STATIC 'a'
STATIC 'b'


# Step 1
print(KIND_STATIC['a'] + KIND_STATIC['b'])

# Step 2
print(KIND_TMP['ab'])

########




let b := a + 'd'
         ^
         No temp value created here

let c := 'e' + b
         ^
         Temp value created here

########
let a := Val() + Val() + Val()
         ^
         Temp value created here

let b := a + Val()
         ^ 